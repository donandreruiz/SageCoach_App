{
  "_args": [
    [
      {
        "raw": "canvg@^1.0",
        "scope": null,
        "escapedName": "canvg",
        "name": "canvg",
        "rawSpec": "^1.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/AndreRuiz/Desktop/sagecoach_app_project/node_modules/jspdf"
    ]
  ],
  "_from": "canvg@>=1.0.0 <2.0.0",
  "_id": "canvg@1.0.0",
  "_inCache": true,
  "_location": "/canvg",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/canvg_1.0.0_1520560263380_0.8229081914076077"
  },
  "_npmUser": {
    "name": "gabelerner",
    "email": "gabelerner@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "canvg@^1.0",
    "scope": null,
    "escapedName": "canvg",
    "name": "canvg",
    "rawSpec": "^1.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jspdf"
  ],
  "_resolved": "https://registry.npmjs.org/canvg/-/canvg-1.0.0.tgz",
  "_shasum": "89a3f39a45a9839115f0bdfe69c4b5632cf971af",
  "_shrinkwrap": null,
  "_spec": "canvg@^1.0",
  "_where": "/Users/AndreRuiz/Desktop/sagecoach_app_project/node_modules/jspdf",
  "author": {
    "name": "Gabe Lerner",
    "email": "gabelerner@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gabelerner/canvg/issues"
  },
  "dependencies": {
    "jsdom": "^8.1.0",
    "rgbcolor": "^1.0.1",
    "stackblur": "^1.0.0",
    "xmldom": "^0.1.22"
  },
  "description": "Javascript SVG parser and renderer on Canvas",
  "devDependencies": {
    "canvas": "^1.4.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-OLAbKltJ8RyAIiJV/AvggSMQaxHK3FmAfScI2jvhDZYKE3vbAW2I2g1iNZiAEIEgLv/M/asQP6htEoNsTtWDGA==",
    "shasum": "89a3f39a45a9839115f0bdfe69c4b5632cf971af",
    "tarball": "https://registry.npmjs.org/canvg/-/canvg-1.0.0.tgz",
    "fileCount": 4,
    "unpackedSize": 114379
  },
  "files": [
    "canvg.js",
    "MIT-LICENSE.txt"
  ],
  "gitHead": "d1ef7fee2bc9dd93793c3fc6edd298c97904b489",
  "homepage": "https://github.com/gabelerner/canvg",
  "keywords": [
    "javascript",
    "client",
    "browser",
    "svg",
    "canvas"
  ],
  "license": "MIT",
  "main": "canvg.js",
  "maintainers": [
    {
      "name": "aarono",
      "email": "aaron.omullan@gmail.com"
    },
    {
      "name": "gabelerner",
      "email": "gabelerner@gmail.com"
    },
    {
      "name": "yetzt",
      "email": "node@yetzt.me"
    }
  ],
  "name": "canvg",
  "optionalDependencies": {},
  "readme": "Introduction\n============\ncanvg is a SVG parser and renderer. It takes a URL to a SVG file or the text of an SVG file, parses it in JavaScript, and renders the result on a [Canvas](http://dev.w3.org/html5/2dcontext/) element.  The rendering speed of the examples is about as fast as native SVG.\n\nWhat's implemented?\n===================\nThe end goal is everything from the [SVG spec](http://www.w3.org/TR/SVG/). The majority of the rendering and animation is working.  If you would like to see a feature implemented, don't hesitate to contact me or add it to the issues list.\n\nPotential uses\n===============\n* Allows for inline embedding of SVG through JavaScript (w/o having to request another file or break validation)\n* Allows for single SVG version across all browsers that support Canvas\n* Allows for mobile devices supporting Canvas but not SVG to render SVG\n* Allows for SVG -> Canvas -> png transition all on the client side (through [toDataUrl](http://www.w3.org/TR/html5/the-canvas-element.html#dom-canvas-todataurl))\n\nExample Demonstration\n=====================\n[view here](http://canvg.github.io/canvg/examples/index.htm)\nTested in Chrome, Firefox, Opera, and IE (through FlashCanvas)\n\n[jsfiddle playground](http://jsfiddle.net/6r2jug6o/)\n\nLocally, can use `local-web-server`\nInstall with `yarn global add local-web-server`\nIn the root directory, run `ws`\nNavigate to `http://localhost:8000/examples/index.htm`\n\nUsage\n=====\nInclude the following files in your page:\n```html\n<script type=\"text/javascript\" src=\"http://canvg.github.io/canvg/rgbcolor.js\"></script> \n<script type=\"text/javascript\" src=\"http://canvg.github.io/canvg/StackBlur.js\"></script>\n<script type=\"text/javascript\" src=\"http://canvg.github.io/canvg/canvg.js\"></script> \n```\n\nPut a canvas on your page\n```html\n<canvas id=\"canvas\" width=\"1000px\" height=\"600px\"></canvas> \n```\n\nExample canvg calls:\n```html\n<script type=\"text/javascript\">\nwindow.onload = function() {\n  //load '../path/to/your.svg' in the canvas with id = 'canvas'\n  canvg('canvas', '../path/to/your.svg')\n\n  //load a svg snippet in the canvas with id = 'drawingArea'\n  canvg(document.getElementById('drawingArea'), '<svg>...</svg>')\n\n  //ignore mouse events and animation\n  canvg('canvas', 'file.svg', { ignoreMouse: true, ignoreAnimation: true }) \n}\n</script>\n```\n\nThe third parameter is options:\n* log: true => console.log information\n* ignoreMouse: true => ignore mouse events\n* ignoreAnimation: true => ignore animations\n* ignoreDimensions: true => does not try to resize canvas\n* ignoreClear: true => does not clear canvas\n* offsetX: int => draws at a x offset\n* offsetY: int => draws at a y offset\n* scaleWidth: int => scales horizontally to width\n* scaleHeight: int => scales vertically to height\n* renderCallback: function => will call the function after the first render is completed\n* forceRedraw: function => will call the function on every frame, if it returns true, will redraw\n* useCORS: true => will attempt to use CORS on images to not taint canvas\n\nYou can call canvg without parameters to replace all svg images on a page. See the [example](http://canvg.github.io/canvg/examples/convert.htm).\n\nThere is also a built in extension method to the canvas context to draw svgs similar to the way [drawImage](http://www.w3.org/TR/2dcontext/#dom-context-2d-drawimage) works:\n```javascript\nvar c = document.getElementById('canvas');\nvar ctx = c.getContext('2d');\nctx.drawSvg(SVG_XML_OR_PATH_TO_SVG, dx, dy, dw, dh);\n```\n\nRelated Repositories\n====================\n* [Output javascript instead of rendering to canvas](http://code.google.com/p/jscapturecanvas/)\n* [A combo of canvg & jscapturecanvas to compile SVG to Canvas (Server side)](https://github.com/nathan-muir/canvgc)\n* [Edit SVG files in your browser](https://code.google.com/p/svg-edit/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gabelerner/canvg.git"
  },
  "scripts": {
    "test": "cd test; node testNode.js"
  },
  "version": "1.0.0"
}
